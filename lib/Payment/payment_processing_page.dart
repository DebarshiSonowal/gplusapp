import 'dart:async';
import 'dart:io';

import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_config/flutter_config.dart';
import 'package:gplusapp/Components/custom_button.dart';
import 'package:gplusapp/Payment/widgets/dialog_box_contents.dart';
import 'package:gplusapp/Payment/widgets/getUserInformationBody.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:provider/provider.dart';
import 'package:purchases_flutter/purchases_flutter.dart';

// import 'package:razorpay_flutter/razorpay_flutter.dart';
import 'package:sizer/sizer.dart';
import 'package:url_launcher/url_launcher.dart';

import '../Components/alert.dart';
import '../Helper/Constance.dart';
import '../Helper/DataProvider.dart';
import '../Helper/Storage.dart';
import '../Helper/app_data.dart';
import '../Helper/store_config.dart';
import '../Model/profile.dart';
import '../Navigation/Navigate.dart';
import '../Networking/api_provider.dart';

class PaymentProcessingPage extends StatefulWidget {
  String input;

  PaymentProcessingPage(this.input);

  @override
  State<PaymentProcessingPage> createState() => _PaymentProcessingPageState();
}

class _PaymentProcessingPageState extends State<PaymentProcessingPage> {
  double tempTotal = 0;
  var temp_order_id = "";
  static const MethodChannel _channel = MethodChannel('easebuzz');
  final email = TextEditingController();
  final phone = TextEditingController();
  final name = TextEditingController();
  StreamSubscription<List<PurchaseDetails>>? _subscription;

  void _listenToPurchaseUpdated(List<PurchaseDetails> purchaseDetailsList) {
    purchaseDetailsList.forEach((PurchaseDetails purchaseDetails) async {
      if (purchaseDetails.status == PurchaseStatus.pending) {
        // _showPendingUI();
      } else {
        if (purchaseDetails.status == PurchaseStatus.error) {
          // _handleError(purchaseDetails.error!);
          showError(purchaseDetails.error.toString());
        } else if (purchaseDetails.status == PurchaseStatus.purchased ||
            purchaseDetails.status == PurchaseStatus.restored) {
          bool valid = await _verifyPurchase(purchaseDetails);
          if (valid) {
            // _deliverProduct(purchaseDetails);
            fetchProfile();
            Navigation.instance.goBack();
            showDialogBox();
          } else {
            showError(purchaseDetails.error.toString());
          }
        }
        if (purchaseDetails.pendingCompletePurchase) {
          await InAppPurchase.instance.completePurchase(purchaseDetails);
        }
      }
    });
  }

  @override
  void initState() {
    final Stream purchaseUpdated = InAppPurchase.instance.purchaseStream;
    _subscription = purchaseUpdated.listen((purchaseDetailsList) {
      _listenToPurchaseUpdated(purchaseDetailsList);
    }, onDone: () {
      _subscription?.cancel();
    }, onError: (error) {
      // handle error here.
    }) as StreamSubscription<List<PurchaseDetails>>?;
    super.initState();
    Future.delayed(Duration.zero, () {
      if (Platform.isAndroid) {
        getUserInformation();
      } else {
        // initiateIOSpurchase();
        // initPlatformState();
        showPaymentOptions();
      }
      // if (Platform.isAndroid) {
      //   // initiateOrder(widget.input.split(',')[0], widget.input.split(',')[1]);
      //
      // } else {
      //   // Navigation.instance.navigate('/paymentProcessingIOS',
      //   //     args: "https://rzp.io/l/haIT8vaJ");
      //   // initiateOrder(widget.input.split(',')[0], widget.input.split(',')[1]);
      // }
    });
  }

  @override
  void dispose() {
    // _razorpay.clear(); // Removes all listeners
    _subscription?.cancel();
    super.dispose();
  }

  initiatePayment(pay_mode, access_key) async {
    // String access_key = "Access key generated by the Initiate Payment API";
    // String pay_mode = """This will either be "test" or "production" """;
    Object parameters = {
      "access_key": access_key,
      "pay_mode": pay_mode,
    };
    // final payment_response = await _channel.invokeMethod("payWithEasebuzz", parameters);
    final Map response =
        await _channel.invokeMethod("payWithEasebuzz", parameters);
    var result = response['result'];
    print(result);
    var detailed_response = response['payment_response'];
    print(detailed_response);
    if (result == "payment_successfull") {
      verifyPayment(detailed_response, "payment_gateway", "", "");
    } else {
      Navigation.instance.goBack();
      showError("Payment failed");
    }
    /* payment_response is the HashMap containing the response of the payment.
You can parse it accordingly to handle response */
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: Constance.buildAppBar2("subscription"),
      body: Container(
        height: MediaQuery.of(context).size.height,
        width: MediaQuery.of(context).size.width,
        color: Storage.instance.isDarkMode ? Colors.black : Colors.white,
        padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 2.h),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              SizedBox(
                height: 5.h,
              ),
              SizedBox(
                height: 12.h,
                width: 25.w,
                child: CircularProgressIndicator(
                  strokeWidth: 4.sp,
                  color: Storage.instance.isDarkMode
                      ? Colors.white
                      : Constance.primaryColor,
                ),
              ),
              SizedBox(
                height: 2.h,
              ),
              Text(
                'Please wait',
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.headline1?.copyWith(
                      color: Storage.instance.isDarkMode
                          ? Colors.white
                          : Constance.primaryColor,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              SizedBox(
                height: 5.h,
              ),
              Text(
                'Your payment is being processed',
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.headline3?.copyWith(
                      color: Storage.instance.isDarkMode
                          ? Colors.white70
                          : Constance.secondaryColor,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              SizedBox(
                height: 20.h,
              ),
              Text(
                'Do not close this page',
                style: Theme.of(context).textTheme.headline4?.copyWith(
                      color: Constance.thirdColor,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              SizedBox(
                height: 5.h,
              ),
              CustomButton(
                  txt: 'Cancel Payment',
                  onTap: () {
                    Navigation.instance.goBack();
                  }),
            ],
          ),
        ),
      ),
    );
  }

  void initiateOrder(id, i) async {
    final response = await ApiProvider.instance.fetchRazorpay();
    if (response.status ?? false) {
      // order(id, i, response.razorpay!);
    } else {
      showError(response.message ?? "Something went wrong");
    }
  }

  void fetchProfile() async {
    // Navigation.instance.navigate('/loadingDialog');
    final response = await ApiProvider.instance.getprofile();
    if (response.success ?? false) {
      Provider.of<DataProvider>(
              Navigation.instance.navigatorKey.currentContext ?? context,
              listen: false)
          .setProfile(response.profile!);
      Provider.of<DataProvider>(
              Navigation.instance.navigatorKey.currentContext ?? context,
              listen: false)
          .setMyTopicks(response.topicks);
      Provider.of<DataProvider>(
              Navigation.instance.navigatorKey.currentContext ?? context,
              listen: false)
          .setMyGeoTopicks(response.geoTopicks);
      Provider.of<DataProvider>(
              Navigation.instance.navigatorKey.currentContext ?? context,
              listen: false)
          .setFloatingButton(response.floating_button!);
      // Navigation.instance.goBack();
    } else {
      // Navigation.instance.goBack();
    }
  }

  void showDialogBox() {
    logTheSubscriptionSuccessfulClick(Provider.of<DataProvider>(
            Navigation.instance.navigatorKey.currentContext ?? context,
            listen: false)
        .profile!);
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          insetPadding: EdgeInsets.zero,
          contentPadding: EdgeInsets.zero,
          clipBehavior: Clip.antiAliasWithSaveLayer,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.all(
              Radius.circular(10.0),
            ),
          ),
          backgroundColor: Colors.white,
          title: Text(
            'Congratulations',
            style: Theme.of(context).textTheme.headline1?.copyWith(
                  color: Constance.secondaryColor,
                  fontWeight: FontWeight.bold,
                ),
          ),
          content: const ShowDialogBoxContent(),
        );
      },
    );
  }

  void logTheSubscriptionSuccessfulClick(Profile profile) async {
    // FirebaseAnalytics analytics = FirebaseAnalytics.instance;
    String id = await FirebaseAnalytics.instance.appInstanceId ?? "";
    // String id = await FirebaseInstallations.instance.getId();
    await FirebaseAnalytics.instance.logEvent(
      name: "subscription_successfull",
      parameters: {
        "login_status": Storage.instance.isLoggedIn ? "logged_in" : "guest",
        "client_id_event": id,
        "user_id_event": profile.id,
        "screen_name": "subscription",
        "user_login_status":
            Storage.instance.isLoggedIn ? "logged_in" : "guest",
        "client_id": id,
        "user_id_tvc": profile.id,
      },
    );
  }

  void showError(String msg) {
    AlertX.instance.showAlert(
        title: "Error",
        msg: msg,
        positiveButtonText: "Done",
        positiveButtonPressed: () {
          Navigation.instance.goBack();
          Navigation.instance.goBack();
        });
  }

  AppBar buildAppBar() {
    return AppBar(
      title: GestureDetector(
        onTap: () {
          Provider.of<DataProvider>(
                  Navigation.instance.navigatorKey.currentContext ?? context,
                  listen: false)
              .setCurrent(0);
          Navigation.instance.navigate('/main');
        },
        child: Image.asset(
          Constance.logoIcon,
          fit: BoxFit.fill,
          scale: 2,
        ),
      ),
      centerTitle: true,
      backgroundColor: Constance.primaryColor,
    );
  }

  void getUserInformation() async {
    name.text =
        Provider.of<DataProvider>(context, listen: false).profile?.name ?? "";
    email.text =
        Provider.of<DataProvider>(context, listen: false).profile?.email ?? "";
    phone.text =
        Provider.of<DataProvider>(context, listen: false).profile?.mobile ?? "";
    showModalBottomSheet<void>(
      shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(top: Radius.circular(25.0))),
      context: context,
      isScrollControlled: true,
      backgroundColor:
          Storage.instance.isDarkMode ? Colors.black : Colors.white,
      builder: (BuildContext context) {
        return GetUserInformationBody(
            name: name,
            email: email,
            phone: phone,
            onTap: () {
              if (name.text.isNotEmpty &&
                  email.text.isNotEmpty &&
                  phone.text.isNotEmpty) {
                fetchKeys(widget.input.split(',')[0], name.text, email.text,
                    phone.text);
                Navigator.of(context).pop();
              } else {
                showError("All the details are mandatory");
              }
            });
      },
    );
  }

  void showPaymentOptions() async {
    showModalBottomSheet<void>(
      shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(top: Radius.circular(25.0))),
      context: context,
      isScrollControlled: true,
      backgroundColor:
          Storage.instance.isDarkMode ? Colors.black : Colors.white,
      builder: (BuildContext context) {
        return Padding(
          padding: MediaQuery.of(context).viewInsets,
          child: Container(
            height: 32.h,
            width: 40.w,
            padding: EdgeInsets.only(
              top: 2.h,
              right: 2.w,
              left: 2.w,
              // bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  'Select the desired payment method',
                  style: Theme.of(context).textTheme.headline4?.copyWith(
                        color: !Storage.instance.isDarkMode
                            ? Colors.black
                            : Colors.white,
                      ),
                ),
                SizedBox(height: 2.h),
                ListView(
                  shrinkWrap: true,
                  children: [
                    ListTile(
                      leading: const Icon(Icons.apple),
                      onTap: () {
                        initPlatformState();
                        Navigation.instance.goBack();
                      },
                      title: Text(
                        'InApp Purchase',
                        style: Theme.of(context).textTheme.headline5?.copyWith(
                              color: Colors.green,
                            ),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 2.h),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      child: Text(
                        'Cancel',
                        style: Theme.of(context).textTheme.headline5?.copyWith(
                              color: Constance.thirdColor,
                            ),
                      ),
                    ),
                  ],
                )
              ],
            ),
          ),
        );
      },
    );
  }

  void fetchKeys(subscription_id, name, email, phone) async {
    final response = await ApiProvider.instance.createOrder(
      subscription_id,
      0,
      name,
      email,
      phone,
      Platform.isAndroid ? "android" : "ios",
    );
    if (response.success ?? false) {
      if (Platform.isAndroid) {
        initiatePayment(response.environment, response.access_key);
      } else {
        final result = await Navigation.instance.navigate('/websitePayment',
            args: "https://guwahatiplus.com/payment/${response.order!.id}");
        if (result != null) {
          fetchProfile();
          Navigation.instance.goBack();
        } else {
          fetchProfile();
          Navigation.instance.goBack();
        }
        // _launchUrl(Uri.parse(
        //     "https://guwahatiplus.com/payment/${response.order!.id}"));
      }
    } else {
      showError(response.message ?? "Something went wrong");
    }
  }

  Future<void> _launchUrl(_url) async {
    if (!await launchUrl(_url, mode: LaunchMode.externalApplication)) {
      throw 'Could not launch $_url';
    }
  }

  void verifyPayment(
      detailed_response, type, transaction_id, purchase_date) async {
    final response = await ApiProvider.instance.verifyPayment(
        "", "", "", detailed_response, type, transaction_id, purchase_date);
    if (response.success ?? false) {
      fetchProfile();
      Navigation.instance.goBack();
      showDialogBox();
    } else {
      showError(response.message ?? "Something Went Wrong");
    }
  }

  _verifyPurchase(PurchaseDetails purchaseDetails) async {
    return await InAppPurchase.instance.restorePurchases();
  }

  void fetchKeysInapp(subscription_id, name, email, phone, transaction_id,
      purchase_date) async {
    final response = await ApiProvider.instance.createOrder(
      subscription_id,
      0,
      name,
      email,
      phone,
      Platform.isAndroid ? "android" : "ios",
    );
    if (response.success ?? false) {
      verifyPaymentInapp(
          response.order?.voucher_no, transaction_id, purchase_date);
    } else {
      showError(response.message ?? "Something went wrong");
    }
  }

  Future<void> initPlatformState() async {
    // Enable debug logs before calling `configure`.
    await Purchases.setDebugLogsEnabled(true);

    /*
    - appUserID is nil, so an anonymous ID will be generated automatically by the Purchases SDK. Read more about Identifying Users here: https://docs.revenuecat.com/docs/user-ids
    - observerMode is false, so Purchases will automatically handle finishing transactions. Read more about Observer Mode here: https://docs.revenuecat.com/docs/observer-mode
    */
    PurchasesConfiguration configuration;
    if (StoreConfig.isForAmazonAppstore()) {
      configuration = AmazonConfiguration(StoreConfig.instance.apiKey)
        ..appUserID = null
        ..observerMode = false;
    } else {
      configuration = PurchasesConfiguration(StoreConfig.instance.apiKey)
        ..appUserID =
            "${Provider.of<DataProvider>(context, listen: false).profile?.id}"
        ..observerMode = false;
    }
    await Purchases.configure(configuration);

    appData.appUserID = await Purchases.appUserID;

    Purchases.addCustomerInfoUpdateListener((customerInfo) async {
      appData.appUserID = await Purchases.appUserID;

      CustomerInfo customerInfo = await Purchases.getCustomerInfo();
      (customerInfo.entitlements.all[FlutterConfig.get('entitlementId')] !=
                  null &&
              customerInfo.entitlements.all[FlutterConfig.get('entitlementId')]!
                  .isActive)
          ? appData.entitlementIsActive = true
          : appData.entitlementIsActive = false;

      // if(mounted){
      //   setState(() {});
      // }
    });

    Offerings offerings;
    try {
      offerings = await Purchases.getOfferings();
      debugPrint("Packages1 ${offerings.current!.availablePackages}");
      final response = await Purchases.appUserID;
      debugPrint("1st $response");
      debugPrint("2nd ${offerings.getOffering("subscriptions")}");
      debugPrint("3rd ${widget.input.split(',')[2]}");
      CustomerInfo customerInfo =
          await Purchases.purchaseProduct(widget.input.split(',')[2]);
      // purchasePackage(offerings
      //       .getOffering("subscriptions")!
      //       .availablePackages
      //       .firstWhere((element) =>
      //           element.storeProduct.identifier == widget.input.split(',')[2]));

      fetchKeysInapp(
          widget.input.split(',')[0],
          Provider.of<DataProvider>(
                  Navigation.instance.navigatorKey.currentContext ?? context,
                  listen: false)
              .profile
              ?.name,
          Provider.of<DataProvider>(
                  Navigation.instance.navigatorKey.currentContext ?? context,
                  listen: false)
              .profile
              ?.email,
          Provider.of<DataProvider>(
                  Navigation.instance.navigatorKey.currentContext ?? context,
                  listen: false)
              .profile
              ?.mobile,
          customerInfo.nonSubscriptionTransactions[0].revenueCatIdentifier,
          customerInfo.nonSubscriptionTransactions[0].purchaseDate);
    } on PlatformException catch (e) {
      debugPrint("Payment ${e.message} ${e.details}");
      showError("Something went wrong");
    }

// if (mounted) {
//   setState(() {});
// }
// Navigation.instance.goBack();
  }

  void verifyPaymentInapp(order_code, transaction_id, purchase_date) async {
    final response = await ApiProvider.instance
        .verifyPaymentInapp(order_code, transaction_id, purchase_date);
    if (response.success ?? false) {
      fetchProfile();
      Navigation.instance.goBack();
      showDialogBox();
    } else {
      showError(response.message ?? "Something Went Wrong");
    }
  }
}
